apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'org.greenrobot.greendao' // apply plugin
apply plugin: "androidx.navigation.safeargs"

apply from: "pack-release.gradle"

android {
    compileSdkVersion getRootProject().compileSdkVersion
    buildToolsVersion getRootProject().buildToolsVersion
    defaultConfig {
        applicationId "frame.zzt.com.appframe"
        minSdkVersion getRootProject().minSdkVersion
        targetSdkVersion getRootProject().targetSdkVersion
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        //ARouter添加
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
    }

    signingConfigs {
        releaseSign {
            keyAlias 'key0'
            keyPassword 'android'
            storeFile file('../dev/ktingKey.jks')
            storePassword 'android'
        }
    }

    //重命名导出的APK名称，带上版本号和渠道号，如：app_android_v1.0.apk
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def outputFile = output.outputFile
            def fileName
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                fileName = "app_android_${variant.buildType.name}_v${variant.versionName}.apk".toLowerCase()
                outputFileName = fileName
            }
        }
    }


    buildTypes {
        release {
            //是否混淆
            minifyEnabled false
            //是否移除无用资源
            zipAlignEnabled true
            //混淆的配置文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.releaseSign
        }

        debug {
            minifyEnabled false
        }
    }

    /**视图绑定 viewBinding 在 Android Studio 4.0 中，viewBinding 变成属性被整合到了 buildFeatures 选项中，所以配置要改成:*/
//    buildFeatures {
//        enabled = true
//    }

    //引入对 DataBinding 的支持
    dataBinding {
        enabled = true
    }

    // java8 支持
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }
    //数据库db版本
    greendao {
        schemaVersion 7
        daoPackage 'frame.zzt.com.appframe.greendao'//这个是生成代码保存的包名
        targetGenDir 'src/main/java'//保存到java代码路径
    }

    /**
     * 使用packagingOptions排除不想添加到apk中的文件
     */
    packagingOptions {
        exclude 'LICENSE.txt'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:${depsVersion.androidx_appcompat}"
    implementation "com.google.android.material:material:${getRootProject().depsVersion.android_material}"

    if (isModule.toBoolean()) {
        implementation project(path: ':CommonModule')
    } else {
        implementation project(path: ':headerrecycleview')
        implementation project(path: ':myviewpager')
        implementation project(path: ':mypagingsamples')
        implementation project(path: ':groupedadapter')
        implementation project(path: ':SignatureView')
    }
    testImplementation 'junit:junit:4.13'
    implementation 'com.google.code.gson:gson:2.8.6'
    // yanzhenjie/AndPermission 运行权限管理库
    implementation 'com.yanzhenjie:permission:1.1.2'
    // rxjava
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.0'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.9'

    // butterknife 注解框架
    implementation 'com.jakewharton:butterknife:10.0.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.0.0'
    // 数据库框架
    implementation 'org.litepal.android:core:2.0.0'
    // greendao 数据库框架
    implementation 'org.greenrobot:greendao:3.3.0'
    // greendao 使用加密数据库时需要添加
    implementation 'net.zetetic:android-database-sqlcipher:3.5.7'
    // 蓝牙ble框架
    implementation 'com.clj.fastble:FastBleLib:2.3.2'
    implementation 'com.inuker.bluetooth:library:1.4.0'
    // 添加kotlin 插件
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    // 添加eventbus 框架
    implementation 'org.greenrobot:eventbus:3.1.1'
    //引入Uiautomator
    implementation 'androidx.test:rules:1.2.0'
    implementation 'androidx.test.ext:junit:1.1.1'
    //跨应用的测试（Ui automator）
    testImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    //内部测试（Espresso）
    implementation 'androidx.test.espresso:espresso-core:3.2.0'
    //Android工程方法数超过65535，解决办法
    implementation 'androidx.multidex:multidex:2.0.1'
    // 滚动图片展示
    implementation 'com.bigkoo:ConvenientBanner:2.1.4'
    // 图片加载框架
    implementation 'com.github.bumptech.glide:glide:4.11.0'

    def lifecycle_version = "2.2.0"
    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel:$lifecycle_version"
    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata:$lifecycle_version"
    // Lifecycles only (without ViewModel or LiveData)
    implementation "androidx.lifecycle:lifecycle-runtime:$lifecycle_version"
    // Saved state module for ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version"
    // Annotation processor
    annotationProcessor "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"
    // alternately - if using Java8, use the following instead of lifecycle-compiler
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    // optional - helpers for implementing LifecycleOwner in a Service
    implementation "androidx.lifecycle:lifecycle-service:$lifecycle_version"
    // optional - ProcessLifecycleOwner provides a lifecycle for the whole application process
    implementation "androidx.lifecycle:lifecycle-process:$lifecycle_version"
    // optional - ReactiveStreams support for LiveData
    implementation "androidx.lifecycle:lifecycle-reactivestreams:$lifecycle_version"

    def fragment_version = "1.2.5"
    // Java language implementation
    implementation "androidx.fragment:fragment:$fragment_version"
    // Kotlin
    implementation "androidx.fragment:fragment-ktx:$fragment_version"

    // constraintlayout
    implementation 'androidx.constraintlayout:constraintlayout:2.0.3'

    // Fragment 重构
    def nav_version = "2.3.0"
    // Java language implementation
    implementation "androidx.navigation:navigation-fragment:$nav_version"
    implementation "androidx.navigation:navigation-ui:$nav_version"
    // Kotlin
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
    // Dynamic Feature Module Support
    implementation "androidx.navigation:navigation-dynamic-features-fragment:$nav_version"

    // ARouter 包
    annotationProcessor 'com.alibaba:arouter-compiler:1.2.2'
}

repositories {
    mavenCentral()
}

